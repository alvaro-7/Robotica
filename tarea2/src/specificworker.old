/*
 *    Copyright (C) 2023 by YOUR NAME HERE
 *
 *    This file is part of RoboComp
 *
 *    RoboComp is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    RoboComp is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with RoboComp.  If not, see <http://www.gnu.org/licenses/>.
 */
#include "specificworker.h"
#include

#define MAX_VEL 500
#define MAX_VEL_ANG 1
/**
* \brief Default constructor
*/
SpecificWorker::SpecificWorker(TuplePrx tprx, bool startup_check) : GenericWorker(tprx)
{
	this->startup_check_flag = startup_check;
	// Uncomment if there's too many debug messages
	// but it removes the possibility to see the messages
	// shown in the console with qDebug()
//	QLoggingCategory::setFilterRules("*.debug=false\n");
}

/**
* \brief Default destructor
*/
SpecificWorker::~SpecificWorker()
{
	std::cout << "Destroying SpecificWorker" << std::endl;
}

bool SpecificWorker::setParams(RoboCompCommonBehavior::ParameterList params)
{
//	THE FOLLOWING IS JUST AN EXAMPLE
//	To use innerModelPath parameter you should uncomment specificmonitor.cpp readConfig method content
//	try
//	{
//		RoboCompCommonBehavior::Parameter par = params.at("InnerModelPath");
//		std::string innermodel_path = par.value;
//		innerModel = std::make_shared(innermodel_path);
//	}
//	catch(const std::exception &e) { qFatal("Error reading config params"); }


	return true;
}

void SpecificWorker::initialize(int period)
{
	std::cout << "Initialize worker" << std::endl;
	this->Period = period;
	if(this->startup_check_flag)
	{
		this->startup_check();
	}
	else
	{
        // Inicializaciones personales
        viewer = new AbstractGraphicViewer(this, QRectF(-5000, -5000, 10000, 10000));
        viewer->add_robot(460, 480, 0, 100, QColor("Blue"));
        viewer->show();
        viewer->activateWindow();

		timer.start(Period);
	}

}

struct p_intervalos{
    RoboCompLidar3D::TPoints p1;
    RoboCompLidar3D::TPoints p2;
    RoboCompLidar3D::TPoints p3;
};

struct p_intervalos intervalear(RoboCompLidar3D::TPoints p){
    // 600 - 900
    // 1100 - 1400
    // 1600 - 1900
    struct p_intervalos puntos;
    for(size_t i = 0; i < p.size(); i++){
             if(p[i].z >= 600  && p[i].z <= 900)
            puntos.p1.push_back(p[i]);
        else if(p[i].z >= 1100 && p[i].z <= 1400)
            puntos.p2.push_back(p[i]);
        else if(p[i].z >= 1600 && p[i].z <= 1900)
            puntos.p3.push_back(p[i]);
    }
    return puntos;
}

extract_peaks()
{
    RoboCompLidar3D::TPoints peaks;

    for(const auto &both : iter::){
        peaks.push_back(both[])
    }
}
void SpecificWorker::detectar_puertas(RoboCompLidar3D::TPoints p){
    struct p_intervalos p_interval = intervalear(p);
    //draw_lidar(p_interval.p2, viewer);
    for(int i = 0; i < p_interval.p1.size(); i++){
        printf("%f %f %f V1\n", p_interval.p1[i].x, p_interval.p1[i].y, p_interval.p1[i].z);
    }
    for(int i = 0; i < p_interval.p2.size(); i++){
        printf("%f %f %f V2\n", p_interval.p2[i].x, p_interval.p2[i].y, p_interval.p2[i].z);
    }
    for(int i = 0; i < p_interval.p3.size(); i++){
        printf("%f %f %f V3\n", p_interval.p3[i].x, p_interval.p3[i].y, p_interval.p3[i].z);
    }

}

void SpecificWorker::compute()
{
    RoboCompLidar3D::TData ldata = lidar3d_proxy->getLidarData("bpearl", 0, 2*M_PI, 1);

    RoboCompLidar3D::TPoints filtered_points;
    std::ranges::remove_copy_if(ldata.points, std::back_inserter(filtered_points), [](auto &p){ return p.z > 2000;});
    detectar_puertas(filtered_points);
    draw_lidar(filtered_points, viewer);
	try {

	} catch(const Ice::Exception &e)
	{  std::cout << "Error reading from Camera" << e << std::endl; 	}
}

int SpecificWorker::startup_check()
{
	std::cout << "Startup check" << std::endl;
	QTimer::singleShot(200, qApp, SLOT(quit()));
	return 0;
}

void SpecificWorker::draw_lidar(const RoboCompLidar3D::TPoints &points, AbstractGraphicViewer *viewer)
{
    static std::vector<QGraphicsItem*> borrar;
    for(auto &b: borrar)
    {
        viewer->scene.removeItem(b);
        delete b;
    }

    borrar.clear();

    for(const auto &p: points)
    {
        auto point = viewer->scene.addRect(-50, -50, 100, 100, QPen(QColor("blue")), QBrush(QColor("blue")));
        //auto point2 = viewer->scene.addRect(-50, -50, 100, 100, QPen(QColor("yellow")), QBrush(QColor("yellow")));
	//if(p)
        	point->setPos(p.x, p.y);
	//else
        //	point2->setPos(p.x, p.y);

        //
        borrar.push_back(point);
    }
}

/**************************************/
// From the RoboCompLidar3D you can call this methods:
// this->lidar3d_proxy->getLidarData(...)

/**************************************/
// From the RoboCompLidar3D you can use this types:
// RoboCompLidar3D::TPoint
// RoboCompLidar3D::TData

